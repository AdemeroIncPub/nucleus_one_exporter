# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build Binaries - Windows

on:
  push:
    branches: [ "wip/create-install" ]
  pull_request:
    branches: [ "wip/create-install" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
      
      - name: Determine most recent tag in branch
        run: |
          cd $env:GITHUB_WORKSPACE
          $MOST_RECENT_TAG_LOCAL = git describe --tags --abbrev=0
          echo "MOST_RECENT_TAG=$MOST_RECENT_TAG_LOCAL" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "OUTPUT_INSTALLER_NAME=NucleusOneExporter-${{ env.MOST_RECENT_TAG }}-Installer.msi" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
      
      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # or: 'beta', 'dev' or 'master'
      
      - id: buildExporter
        name: Build Windows EXE
        run: |
          cd $env:GITHUB_WORKSPACE
          flutter build windows --release
      
      # Set the WiX path.  See https://www.scivision.dev/github-actions-path-append/
      - name: Add WiX path to GITHUB_PATH
        run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Build MSI
        run: |
          candle.exe -nologo "install\windows\Setup.wxs" -out "install\windows\Setup.wixobj" -ext WixUIExtension
          light.exe -nologo "install\windows\Setup.wixobj" -out "install\windows\${{ env.OUTPUT_INSTALLER_NAME }}" -ext WixUIExtension

      # - name: Create release
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       try {
      #         const response = await github.rest.repos.createRelease({
      #           draft: true,
      #           generate_release_notes: true,
      #           name: process.env.MOST_RECENT_TAG,
      #           owner: context.repo.owner,
      #           prerelease: false,
      #           repo: context.repo.repo,
      #           tag_name: process.env.MOST_RECENT_TAG,
      #         });

      #         core.exportVariable('RELEASE_ID', response.data.id);
      #         core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
      #       } catch (error) {
      #         core.setFailed(error.message);
      #       }

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.MOST_RECENT_TAG }}
          generate_release_notes: true
          #body_path: ${{ github.workspace }}-CHANGELOG.txt
          files: |
            ./install/windows/${{ env.OUTPUT_INSTALLER_NAME }}
          fail_on_unmatched_files: true
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}