# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build Binaries - Windows

on:
  push:
    branches: [ "wip/create-install" ]
  pull_request:
    branches: [ "wip/create-install" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      
      # - uses: subosito/flutter-action@v2
      #   with:
      #     channel: 'stable' # or: 'beta', 'dev' or 'master'
      
      # - run: |
      #     flutter config --enable-windows-desktop
      #     flutter build windows
      
      # # Set the WiX path.  See https://www.scivision.dev/github-actions-path-append/
      # - name: Add WiX path to GITHUB_PATH
      #   run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      # - id: buildExporter
      #   name: Build EXE
      #   run: |
      #     cd \
      #     md dev
      #     cd dev
      #     git clone https://github.com/AdemeroIncPub/nucleus_one_exporter.git
      #     cd nucleus_one_exporter
      #     flutter build windows --release
      
      # - name: Build MSI
      #   run: |
      #     candle.exe -nologo "install\windows\Setup.wxs" -out "install\windows\Setup.wixobj" -ext WixUIExtension
      #     light.exe -nologo "install\windows\Setup.wixobj" -out "install\windows\Setup.msi"  -ext WixUIExtension
      
      - name: Determine tag
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo process.env.RELEASE_TAG

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: true,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }