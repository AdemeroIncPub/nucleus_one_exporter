# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from `package:lints`.
# This set helps identify many issues that may lead to problems when running
# or consuming Dart code, and enforces writing Dart using a single, idiomatic
# style and format.
#
# If you want a smaller set of lints you can change this to specify
# 'package:lints/core.yaml'. These are just the most critical lints
# (the recommended set includes the core lints).
# The core lints are also what is used by pub.dev for scoring packages.

include: package:lints/recommended.yaml

# Uncomment the following section to specify additional rules.

linter:
  rules:
    ## Error Rules
    - avoid_print
    - avoid_returning_null_for_future
    - avoid_slow_async_io
    - avoid_type_to_string
    - cancel_subscriptions
    - close_sinks
    # - discarded_futures # releases in Dart 2.18 (Linter 1.25.0)
    - no_adjacent_strings_in_list
    - prefer_relative_imports
    - throw_in_finally
    - unnecessary_statements
    - unsafe_html
    ## Style Rules
    - always_declare_return_types
    - always_put_required_named_parameters_first
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_js_rounded_ints
    - avoid_returning_null
    - avoid_void_async
    # - combinators_ordering # released in Dart 2.19 (Linter 1.26.0)
    - deprecated_consistency
    - directives_ordering
    - flutter_style_todos
    - leading_newlines_in_multiline_strings
    - missing_whitespace_between_adjacent_strings
    - noop_primitive_operations
    - one_member_abstracts
    - only_throw_errors
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_constructors_over_static_methods
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_if_elements_to_conditional_expressions
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_single_quotes
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - unawaited_futures
    - unnecessary_await_in_return
    # - unnecessary_to_list_in_spreads # releases in Dart 2.18 (Linter 1.25.0)
    - use_enums
    - use_if_null_to_convert_nulls_to_bools
    ## Pub Rules
    - sort_pub_dependencies

analyzer:
  # exclude:
  #   - path/to/excluded/files/**
  language:
    # strict-casts: A value of true ensures that the type inference engine never
    # implicitly casts from dynamic to a more specific type. (default: false)
    strict-casts: true
    # strict-inference: A value of true ensures that the type inference engine
    # never chooses the dynamic type when it can’t determine a static type.
    # (default: false)
    strict-inference: true
    # strict-raw-types: A value of true ensures that the type inference engine
    # never chooses the dynamic type when it can’t determine a static type due
    # to omitted type arguments. (default: false)
    strict-raw-types: true

# For more information about the core and recommended set of lints, see
# https://dart.dev/go/core-lints

# For additional information about configuring this file, see
# https://dart.dev/guides/language/analysis-options
